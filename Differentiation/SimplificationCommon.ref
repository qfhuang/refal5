$EXTERNAL IsFunctionName;

$EXTERNAL RemoveZeroPower_Monomial;
$EXTERNAL RemoveZeroPower_NonMonomialFraction;
$EXTERNAL RemoveZeroMult_SimpleSummand;

* ---- Simplification for simple presentation ----

$ENTRY NoS12n
{
    t.X = t.X;
}

* S12n is abbreviation for "Simplification".

$ENTRY S12n_SimpleExpression
{
    (s.S12n_SimpleSummand s.S12n_Monomial s.S12n_NonMonomialFraction)
    (e.Processed) (t.SimpleSummand e.X) =
        <S12n_SimpleExpression
            (
                s.S12n_SimpleSummand
                s.S12n_Monomial
                s.S12n_NonMonomialFraction
            )

            (e.Processed <Mu s.S12n_SimpleSummand <S12n_SimpleSummand
                (
                    s.S12n_SimpleSummand
                    s.S12n_Monomial
                    s.S12n_NonMonomialFraction
                )

                t.SimpleSummand
            >>) (e.X)
        >;

    (s.S12n_SimpleSummand s.S12n_Monomial s.S12n_NonMonomialFraction)
    (e.Processed) () =
        (e.Processed);

    (s.S12n_SimpleSummand s.S12n_Monomial s.S12n_NonMonomialFraction)
    t.SimpleExpr =
        <S12n_SimpleExpression
            (
                s.S12n_SimpleSummand
                s.S12n_Monomial
                s.S12n_NonMonomialFraction
            )

            ()
            t.SimpleExpr
        >;
}

S12n_SimpleSummand
{
    (s.S12n_SimpleSummand s.S12n_Monomial s.S12n_NonMonomialFraction)
    (t.ConstMult t.Monomial t.NonMonomialFrac) =
        (
            t.ConstMult
            <Mu s.S12n_Monomial t.Monomial>
            <Mu s.S12n_NonMonomialFraction <S12n_NonMonomialFraction
                (
                    s.S12n_SimpleSummand
                    s.S12n_Monomial
                    s.S12n_NonMonomialFraction
                )

                t.NonMonomialFrac
            >>
        );
}

S12n_NonMonomialFraction
{
    t.Functions (t.N t.D) =
        (
            <S12n_NonMonomial t.Functions t.N>
            <S12n_NonMonomial t.Functions t.D>
        );
}

S12n_NonMonomial
{
    (s.S12n_SimpleSummand s.S12n_Monomial s.S12n_NonMonomialFraction)
    (e.Processed) (t.NonMonomialEntry e.X) =
        <S12n_NonMonomial
            (
                s.S12n_SimpleSummand
                s.S12n_Monomial
                s.S12n_NonMonomialFraction
            )

            (e.Processed <S12n_NonMonomialEntry
                (
                    s.S12n_SimpleSummand
                    s.S12n_Monomial
                    s.S12n_NonMonomialFraction
                )

                t.NonMonomialEntry
            >) (e.X)
        >;

    (s.S12n_SimpleSummand s.S12n_Monomial s.S12n_NonMonomialFraction)
    (e.Processed) () =
        (e.Processed);

    (s.S12n_SimpleSummand s.S12n_Monomial s.S12n_NonMonomialFraction)
    t.NonMonomial =
        <S12n_NonMonomial
            (
                s.S12n_SimpleSummand
                s.S12n_Monomial
                s.S12n_NonMonomialFraction
            )

            ()
            t.NonMonomial
        >;
}

S12n_NonMonomialEntry
{
    (s.S12n_SimpleSummand s.S12n_Monomial s.S12n_NonMonomialFraction)
    (Invol t.SimpleExpr t.ConstPower) =
        (Invol <S12n_SimpleExpression
            (
                s.S12n_SimpleSummand
                s.S12n_Monomial
                s.S12n_NonMonomialFraction
            )

            t.SimpleExpr
        > t.ConstPower);

    (s.S12n_SimpleSummand s.S12n_Monomial s.S12n_NonMonomialFraction)
    (s.FuncName t.SimpleExpr),
    <IsFunctionName s.FuncName> : True =
        (s.FuncName <S12n_SimpleExpression
            (
                s.S12n_SimpleSummand
                s.S12n_Monomial
                s.S12n_NonMonomialFraction
            )

            t.SimpleExpr
        >);

    (s.S12n_SimpleSummand s.S12n_Monomial s.S12n_NonMonomialFraction)
    t.SimpleExpr = 
        <S12n_SimpleExpression
            (
                s.S12n_SimpleSummand
                s.S12n_Monomial
                s.S12n_NonMonomialFraction
            )

            t.SimpleExpr
        >;
}
