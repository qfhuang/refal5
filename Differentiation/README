==== Grammars ====

---- Input expression grammar ----

/* TODO */

---- Internal expression presentation grammar ----

Macrodigit, identifier are internal Refal 5 symbol types.

ConstMult, ConstPower -> (MonadicMinus Macrodigit) | Macrodigit

Number  -> Macrodigit
Variable -> Identifier // (except function names)
Invol -> (Invol Expression ConstPower)
FuncName -> ... // see Utils.ref FuncNamesSet
Function -> (FuncName Expression) 
Expr_0 -> Number | Variable | Invol | Function | Expression
Expr_1 -> (MonadicMinus Expr_1) | Expr_0
Expr_2 -> (Mul Expr_2 Expr_1) | (Div Expr_2 Expr_1) | Expr_1
Expression -> (Plus Expression Expr_2) | (Minus Expression Expr_2) | Expr_2

---- Internal simple expression presentation grammar ----

* SimpleExpr_0 and SimpleExpr_1 is not contains in SimpleExpression, this is
  auxiliary items.

SimpleExpr_0 -> Macrodigit | VarPower | Invol | SimpleFunction |
                SimpleExpression

SimpleExpr_1 -> (MonadicMinus SimpleExpr_0) | SimpleExpr_0

// Numerator and denominator.
ConstMult -> (MonadicMinus Macrodigit Macrodigit) | (Macrodigit Macrodigit)

ConstPower -> (MonadicMinus Macrodigit) | Macrodigit

VarPower -> (Variable ConstPower)

SimpleFunction -> (FuncName SimpleExpression) 

// Monomial â€” not contain non monomial entries.
// Product of VarPower.
Monomial -> ({VarPower}) | ()

NonMonomialEntry -> (Invol SimpleExpression ConstPower) | SimpleFunction |
                    SimpleExpression

// Product of NonMonomialEntry.
NonMonomial -> ({NonMonomialEntry}) | ()

// Numerator and denominator.
NonMonomialFraction -> (NonMonomial NonMonomial)

SimpleSummand -> (ConstMult Monomial NonMonomialFraction)

// Summa of SimpleSummand.
SimpleExpression -> ({SimpleSummand})

// vim: set ft=asciidoc:
