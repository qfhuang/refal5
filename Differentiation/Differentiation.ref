$EXTERNAL FuncNamesSet;
$EXTERNAL Contain;
$EXTERNAL IsVariable;
$EXTERNAL IsMacrodigit;

$ENTRY Differentiation
{
    (t.Var) t.Expr =
        <DExpression (t.Var) t.Expr>;

    e.X =;
}

/* TODO (maybe): SNumber -> ConstNumber (['-'] Macrodigit) */
SubSNumber
{
    (s.Macrodigit_1) s.Macrodigit_2,
    <Sub (s.Macrodigit_1) s.Macrodigit_2> :
    {
        s.Macrodigit = s.Macrodigit;
        '-' s.Macrodigit = (MonadicMinus s.Macrodigit);
    };

    (MonadicMinus s.Macrodigit_1) s.Macrodigit_2 =
        (MonadicMinus <Add (s.Macrodigit_1) s.Macrodigit_2>);
}

DVar
{
    (t.Var) t.Var = 1;
    (t.Var) t.Variable = 0;
}

DInvol
{
    (t.Var) (Invol t.Expr t.SNumber) =
        (Mul
            (Mul
                t.SNumber
                (Invol t.Expr <SubSNumber (t.SNumber) 1>)
            )
            <DExpression (t.Var) t.Expr>
        );
}

FuncPair
{
    (sin t.Expr) = (cos t.Expr);
    (cos t.Expr) = (MonadicMinus (sin t.Expr));
    (ln t.Expr) = (Div 1 t.Expr);
    (exp t.Expr) = (exp t.Expr);
    (sqrt t.Expr) = (Div 1 (Mul 2 (sqrt t.Expr)));

    (arcsin t.Expr) =
        (Div
            1
            (sqrt
                (Sub
                    1
                    (MonadicMinus
                        (Invol t.Expr 2)
                    )
                )
            )
        );

    (arccos t.Expr) =
        (Div
            (MonadicMinus 1)
            (sqrt
                (Sub
                    1
                    (MonadicMinus
                        (Invol t.Expr 2)
                    )
                )
            )
        );
}

DFunc
{
    (t.Var) (t.FuncName t.Expr) =
        (Mul <FuncPair (t.FuncName t.Expr)> <DExpression (t.Var) t.Expr>);
}

DExpr_0
{
    (t.Var) s.Macrodigit,
    <IsMacrodigit s.Macrodigit> : True =
        0;

    (t.Var) t.Variable,
    <IsVariable t.Variable> : True =
        <DVar (t.Var) t.Variable>;

    (t.Var) (Invol t.Expr t.SNumber) =
        <DInvol (t.Var) (Invol t.Expr t.SNumber)>;

    (t.Var) (t.FuncName t.Expr),
    <Contain (<FuncNamesSet>) t.FuncName> : True =
        <DFunc (t.Var) (t.FuncName t.Expr)>;
}

DExpr_1
{
    (t.Var) (MonadicMinus t.Expr_1) =
        (MonadicMinus <DExpr_1 (t.Var) t.Expr_1>);

    (t.Var) t.Expr_0 =
        <DExpr_0 (t.Var) t.Expr_0>;
}

DExpr_2
{
    (t.Var) (Mul t.Expr_2 t.Expr_1) =
        (Plus
            (Mul <DExpr_2 (t.Var) t.Expr_2> t.Expr_1)
            (Mul t.Expr_2 <DExpr_2 (t.Var) t.Expr_1>)
        );

    (t.Var) (Div t.Expr_2 t.Expr_1) =
        (Div
            (Minus
                (Mul <DExpr_2 (t.Var) t.Expr_2> t.Expr_1)
                (Mul t.Expr_2 <DExpr_1 (t.Var) t.Expr_1>)
            )
            (Invol t.Expr_1 2)
        );

    (t.Var) t.Expr_1 =
        <DExpr_1 (t.Var) t.Expr_1>;
}

DExpression
{
    (t.Var) (s.Op t.Expr t.Expr_2),
    <Contain (Plus Minus) s.Op> : True =
        (s.Op
            <DExpression (t.Var) t.Expr>
            <DExpr_2 (t.Var) t.Expr_2>
        );

    (t.Var) t.Expr_2 =
        <DExpr_2 (t.Var) t.Expr_2>;
}
